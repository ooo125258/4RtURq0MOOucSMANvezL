113c113,115
<             
---
>             #Order of the iteration
>             last_row_idx = iNumRows - 1
>             last_col_idx = iNumCols - 1
115,116c117,118
<                 i = iNumRows - iteri - 1
<                 j = iNumCols - iterj - 1
---
>                 i = last_row_idx - iteri
>                 j = last_col_idx - iterj
124,125c126,127
<             #skip_propagation = (i == 0 and j == 0) or (i == iNumRows - 1 and  j == iNumCols - 1)
<             skip_propagation = False
---
>             skip_propagation = (i == 0 and j == 0) or (i == last_row_idx and  j == last_col_idx)
>             #skip_propagation = False
130c132
<                 source_pts = np.array([], dtype=int)
---
>                 source_pts = np.array([])
149,151d150
<                 dists = np.zeros((0))
<                 #for target_pt_idx in target_pts:#TODO: Change to matrix form later.
<                 
156a156
>                 #Current shape for square_diff: 2 * target_patch_shape(2d)
159c159
<                 # 2 * target_patch_shape(2d)
---
>                 
167d166
<                     curr_fxy = dists[min_dist_idx]
171,172d169
<                 if i == 0 and j == 0:
<                     print(1)
176,179c173,175
<                 alphai = alpha
<                 uis = np.array([], dtype=int)#As this is used as INDEX!
<                 #R = np.random.uniform(-1,1,2 * i_max).reshape(-1,2)
<                 R = 2*(np.random.rand(2 * i_max) - 0.5)
---
>                 uis = None#As this is used as INDEX!
>                 R = np.random.uniform(-1,1,2 * i_max).reshape(-1,2)
>                 #R = 2*(np.random.rand(2 * i_max) - 0.5)
182,191c178
<                 '''
<                 while w * alphai >= 1:
<                     #Ri is a uniform random in [ 1, 1] * [ 1, 1]
<                     Ri = np.random.uniform(-1,1,2)
<                     #ui = v0 + w*alpha^i Ri
<                     alphai *= alpha
<                     ui = new_f[i,j] + w * alphai * Ri
<                     uis = np.append(uis, ui)
<                 uis = uis.reshape(len(uis) / 2, 2)
<                 '''
---
>                 
194,195c181,182
<                 target_pts[:, 0] = np.clip(target_pts[:, 0], 0, iNumRows - 1)
<                 target_pts[:, 1] = np.clip(target_pts[:, 1], 0, iNumCols - 1)
---
>                 target_pts[:, 0] = np.clip(target_pts[:, 0], 0, last_row_idx)
>                 target_pts[:, 1] = np.clip(target_pts[:, 1], 0, last_row_idx)
200d186
<                 dists = np.zeros((0))
