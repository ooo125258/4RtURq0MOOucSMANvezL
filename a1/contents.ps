%!PS-Adobe-2.0
%%Creator: dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software
%%Title: fsnlp.dvi
%%Pages: 9
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Helvetica Palatino-Italic Palatino-BoldItalic
%%+ Palatino-Bold Palatino-Roman
%%EndComments
%DVIPSCommandLine: dvips -pp 5,7-14 fsnlp
%DVIPSParameters: dpi=600, compressed, comments removed
%DVIPSSource:  TeX output 1999.01.07:1002
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: pstricks.pro
% PostScript prologue for pstricks.tex.
% Created 1994/6/23. Source file was pstricks.doc
% Version 0.93a, 93/03/12.
% For use with Rokicki's dvips.
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
def
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
%  Modification Denis GIROU (CNRS/IDRIS - France) <Denis.Girou@idris.fr> - 15 Jan. 1997
% /Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
% pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
% div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
% d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt { 1 setlinecap [ 0 dx n div ]
dy n div 2 div setdash } { 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
%%EndProcSet
%%BeginProcSet: pst-dots.pro
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%%EndProcSet
%%BeginProcSet: pst-node.pro
% PostScript prologue for pst-node.tex.
% Created 1994/6/7. Source file was pst-node.doc
% Version 0.93a/b-97 patch 1, 97/05/09.
% For use with Rokicki's dvips.
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - 9 May 1997
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
%%EndProcSet
%%BeginProcSet: tree-dvips91.pro
TeXDict begin /@beginspec{gsave Resolution 72 div VResolution -72 div scale
treedict begin}def /@endspec{end grestore}def /treedict 200 dict def treedict
begin /pt{72 mul 72.07 div}def /nodemargin 2 def /nodes 100 dict def /node{
/dpth exch def /hght exch def /wdth exch def 4 dict dup begin /x /y
currentpoint dpth sub nodemargin sub exch 3 1 roll def nodemargin sub def /h
hght dpth add nodemargin dup add add def /w wdth nodemargin dup add add def
end nodes 3 1 roll put}def /nodebottom{begin x w 2 div add y end}def /nodetop{
begin x w 2 div add y h add end}def /nodeleft{begin x y h 2 div add end}def
/noderight{begin x w add y h 2 div add end}def /nodetopleft{begin x y h add
end}def /nodetopright{begin x w add y h add end}def /nodebottomleft{begin x y
end}def /nodebottomright{begin x w add y end}def /farright{begin x w add depth
add h 2 div y add end}def /farleft{begin x depth sub h 2 div y add end}def
/farbottom{begin x w 2 div add y depth sub end}def /fartop{begin x w 2 div add
y h add depth add end}def /farbottomleft{begin x depth 45 cos mul sub y depth
45 sin mul sub end}def /farbottomright{begin x w add depth 45 cos mul add y
depth 45 sin mul sub end}def /fartopright{begin x w add depth 45 cos mul add y
h add depth 45 sin mul add end}def /fartopleft{begin x depth 45 cos mul sub y
h add depth 45 sin mul add end}def /alignpoint{2 copy sub abs 1 le{add 2 div
round dup}if}def /getnode{nodes exch get}def /nodeconnect{gsave transform 4 2
roll transform exch 4 1 roll alignpoint 4 2 roll alignpoint 4 1 roll exch
itransform moveto itransform lineto stroke grestore}def /arrowdict 15 dict def
arrowdict begin /mtrx matrix def end /arrow{arrowdict begin /insetlength exch
def /headlength exch def /halfheadthickness exch 2 div def /tipy exch def
/tipx exch def /taily exch def /tailx exch def /dx tipx tailx sub def /dy tipy
taily sub def /angle dy dx atan def /savematrix mtrx currentmatrix def tipx
tipy translate angle rotate 0 0 moveto headlength neg halfheadthickness neg
lineto headlength insetlength sub neg 0 lineto headlength neg
halfheadthickness lineto closepath fill savematrix setmatrix end}def
/arrowfill{gsave newpath arrowwidth arrowlength arrowinset arrow grestore}def
/arrowline{arrowdict begin gsave newpath /tipfix exch def /tailfix exch def
/tipy exch def /tipx exch def /taily exch def /tailx exch def /dx tipx tailx
sub def /dy tipy taily sub def /angle dy dx atan def /savematrix mtrx
currentmatrix def tipx tipy translate angle rotate tipfix neg 0 moveto
savematrix setmatrix /savematrix mtrx currentmatrix def tailx taily translate
angle rotate tailfix 0 lineto savematrix setmatrix stroke grestore end}def
/arrownodeconnect{gsave transform 4 2 roll transform exch 4 1 roll alignpoint
4 2 roll alignpoint 4 1 roll exch itransform 4 2 roll itransform 4 copy 0
arrowdict begin arrowlength arrowinset sub end arrowline gsave newpath
arrowfill grestore grestore}def /doublearrownodeconnect{gsave transform 4 2
roll transform exch 4 1 roll alignpoint 4 2 roll alignpoint 4 1 roll exch
itransform 4 2 roll itransform 4 copy arrowdict begin arrowlength arrowinset
sub end dup arrowline 4 copy gsave newpath arrowfill grestore gsave newpath 4
2 roll arrowfill grestore grestore}def /barnodeconnect{4 2 roll 2 copy moveto
5 -1 roll add dup 3 1 roll lineto 2 index exch lineto lineto stroke}def
/arrowbarnodeconnect{4 2 roll 2 copy moveto 5 -1 roll add dup 3 1 roll lineto
2 index exch 4 copy lineto lineto gsave newpath 4 2 roll arrowfill fill
grestore stroke}def /nodetriangle{gsave exch nodes exch get nodebottom moveto
dup nodes exch get nodetopleft lineto nodes exch get nodetopright lineto
closepath stroke grestore}def /slope{/y1 exch def /x1 exch def /y0 exch def
/x0 exch def y1 y0 sub x1 x0 sub div}def /midpoint{/y1 exch def /x1 exch def
/y0 exch def /x0 exch def x1 x0 sub abs x1 x0 ge{x0 add}{x1 add}ifelse y1 y0
sub abs y1 y0 ge{y0 add}{y1 add}ifelse}def /tancurveto{1 index exch curveto}
def /nodetancurve{/depth exch def /to exch def /from exch def gsave nodes from
get noderight moveto nodes to get noderight tancurveto stroke grestore}def
/getloc{3 -1 roll nodes exch get dup begin depth end 3 1 roll exch cvx exec 4
2 roll}def /rightcur{0 /noderight getloc}def /leftcur{180 /nodeleft getloc}
def /topcur{90 /nodetop getloc}def /bottomcur{270 /nodebottom getloc}def
/topleftcur{135 /nodetopleft getloc}def /toprightcur{45 /nodetopright getloc}
def /bottomleftcur{225 /nodebottomleft getloc}def /bottomrightcur{315
/nodebottomright getloc}def /arrowfiddledict 10 dict def /arrowfiddle{
arrowfiddledict begin /twist exch def /shift exch def /shaft exch def /angle
exch twist add def /tipy exch def /tipx exch def tipx angle cos shaft mul add
tipy angle sin shaft mul add tipx angle cos shift mul add tipy angle sin shift
mul add end}def /nodecurve{gsave 0 fromangle arrowfiddle moveto 6 2 roll 0
toangle arrowfiddle curveto stroke grestore}def /arrownodecurve{gsave 0
fromangle arrowfiddle moveto 6 2 roll 4 copy 10 4 roll arrowlength arrowinset
sub toangle arrowfiddle curveto 0 toangle arrowfiddle arrowfill stroke
grestore}def /arrow2nodecurve{gsave 4 copy 0 fromangle arrowfiddle arrowfill
arrowlength arrowinset sub fromangle arrowfiddle moveto 6 2 roll 4 copy 10 4
roll arrowlength arrowinset sub toangle arrowfiddle curveto 0 toangle
arrowfiddle arrowfill stroke grestore}def /delink{gsave 4 copy newslope 6 2
roll newmidpoint delinkline}def /delinkline{moveto dup 0 eq{blong 2 div neg 0
rmoveto blong 0 rlineto 2 pop}{exch dup 0 eq{0 blong 2 div neg rmoveto 0 blong
rlineto 2 pop}{div neg dup dup mul 1 add sqrt blong exch div 2 copy mul 2 copy
2 div neg exch 2 div neg exch rmoveto rlineto 1 pop}ifelse}ifelse stroke
grestore}def /delinkcurve{8 copy 8 copy bezslope 10 2 roll bezmidpoint
delinkline}def /xyarrange{exch 3 1 roll 5 -1 roll 7 -1 roll exch 4 2 roll}def
/calcx{exch 3 mul 3 -1 roll 3 mul add add add 8 mul}def /calcy{add exch sub
exch sub}def /bezmidpoint{xyarrange calcx 5 1 roll calcx exch}def /bezslope{
xyarrange calcy 5 1 roll calcy exch}def /newmidpoint{exch 4 -1 roll add 2 div
3 1 roll add 2 div}def /newslope{4 -1 roll exch 4 1 roll sub 3 1 roll sub exch
}def /nodebox{nodes exch get begin gsave newpath x y moveto h w dobox cleanup
stroke grestore end}def /nodecircle{nodes exch get begin gsave newpath w 2 div
x add h 2 div y add w w mul h h mul add sqrt 2 div 4 -1 roll add 360 0 arcn
cleanup stroke grestore end}def /nodecircletrans{nodes exch get begin gsave
newpath w 2 div x add h 2 div y add w w mul h h mul add sqrt 2 div 4 -1 roll
add 360 0 arcn stroke grestore end}def /nodeoval{nodes exch get begin gsave
newpath x 2 sub y 2 sub moveto h 4 add w 4 add dooval cleanup stroke grestore
end}def /testnodeoval{nodes exch get begin gsave newpath h h mul w w mul add
sqrt div dup dup dup w mul neg x add exch h mul neg y add moveto dup h mul 2
mul h add exch w mul 2 mul w add testdooval stroke grestore end}def /cleanup{
gsave x y moveto h nodemargin sub .5 add w nodemargin sub .5 add doccbox 1
setgray fill grestore}def /boxdict 4 dict def boxdict /mtrx matrix put /dobox{
boxdict begin /w exch def /h exch def /savematrix mtrx currentmatrix def 0 h
rlineto w 0 rlineto 0 h neg rlineto closepath savematrix setmatrix end}def
/doccbox{boxdict begin /w exch def /h exch def /savematrix mtrx currentmatrix
def w 0 rlineto 0 h rlineto w neg 0 rlineto closepath savematrix setmatrix end
}def /ovaldict 6 dict def ovaldict /mtrx matrix put /dooval{ovaldict begin /w
exch def /h exch def /savematrix mtrx currentmatrix def 0 h 2 div rmoveto 0 h
2 div nodemargin sub nodemargin h 2 div w 2 div h 2 div rcurveto w 2 div
nodemargin sub 0 w 2 div nodemargin neg w 2 div h 2 div neg rcurveto 0 h 2 div
neg nodemargin add nodemargin neg h 2 div neg w 2 div neg h 2 div neg rcurveto
w 2 div neg nodemargin add 0 w 2 div neg nodemargin w 2 div neg h 2 div
rcurveto savematrix setmatrix end}def /testdooval{ovaldict begin /w exch def
/h exch def /r exch def h 2 div neg r mul dup h 2 div dup r mul 3 1 roll 2 r
sub mul 0 h rcurveto w 2 div dup r mul exch 2 r sub mul w 2 div r mul dup 3 1
roll w 0 rcurveto h 2 div r mul dup h 2 div neg dup r mul 3 1 roll 2 r sub mul
0 h neg rcurveto w 2 div neg dup r mul exch 2 r sub mul w 2 div neg r mul dup
3 1 roll w neg 0 rcurveto end}def end end
%%EndProcSet
%%BeginFont: Helvetica
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "22 June 1996",
%   filename = "8r.enc",
%   email = "kb@@mail.tug.org",
%   address = "135 Center Hill Rd. // Plymouth, MA 02360",
%   codetable = "ISO/ASCII",
%   checksum = "119     662    4424",
%   docstring = "Encoding for TrueType or Type 1 fonts to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def
%%EndFont
%%BeginProcSet: texps.pro
TeXDict begin /rf{findfont dup length 1 add dict begin{1 index /FID ne 2
index /UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type /integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics /Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont /setfont load]cvx def}def
/ObliqueSlant{dup sin S cos div neg}B /SlantFont{4 index mul add}def
/ExtendFont{3 -1 roll mul exch}def /ReEncodeFont{/Encoding exch def}def
end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (fsnlp.dvi)
@start /Fa 1 111 df<017EEB03FC3B01FF801FFF800007D9E07F13E03B0F8FF0FC1FF0
903A0FF3E00FF83A1E07FFC007003E1480D83C0F01007F5C00785B5C160FD8F81F5D00F0
5B1200161F013F5D5CA2163F017F5D5C167F5F01FF14FF4AEC8078A24B14F848EE00F014
004BEB01E0EEFE0348020114C0491507EF0F800300EB3F0049EC7FFC496E5AC648EC0FE0
35277EA53B>110 D E /Fb 1 49 df<13E0EA01F0EA03F8A3EA07F0A313E0A2120F13C0
A3EA1F80A21300A25A123EA35AA3127812F8A25A12100D1E7D9F13>48
D E /Fc 139[25 29 3[33 42 1[21 2[21 3[29 37 2[33 28[58
50 67[{ TeXBase1Encoding ReEncodeFont }11 75.000000 /Palatino-Italic
rf /Fd 135[42 1[46 12[28 47[42 42 42 42 42 42 42 42 42
42 48[{ TeXBase1Encoding ReEncodeFont }13 83.333336 /Palatino-Bold
rf /Fe 133[42 46 42 1[46 46 32 37 32 45 46 46 46 69 28
46 1[28 46 42 28 37 46 37 45 46 9[83 2[51 46 60 1[55
69 65 78 51 2[32 1[65 46 51 65 57 55 60 6[21 12[32 45[{
 TeXBase1Encoding ReEncodeFont }43 83.333336 /Palatino-BoldItalic
rf /Ff 3 117 df<0103B7FC4916E018F8903B0007F80007FC4BEB00FE187F020FED3F80
F01FC05DA2021F16E0A25DA2143FF03FC05DA2027FED7F80A292C8130018FE4A4A5A604A
EC07F04D5A0101ED3FC04CB4C7FC91B612FC17E0D903FCCAFCA25CA21307A25CA2130FA2
5CA2131FA25CA2133FA25CA2137FA291CBFC497EB6FCA33B397DB835>80
D<D803E0137F3A07F801FFE03A0E3C0781F03A1C3E1E00F826383F387F00305B4A137C00
705B00605BA200E090C712FC485A137EA20000140101FE5C5BA2150300015D5B15075E12
0349010F133016C0031F13700007ED80605B17E0EE00C0000F15014915801603EE070000
1FEC0F0E49EB07FC0007C7EA01F02C267EA432>110 D<EB01C0497E1307A4130F5CA313
1F5CA3133F91C7FC007FB51280A2B6FCD8007EC7FCA313FE5BA312015BA312035BA31207
5BA3120FEBC006A2140E001F130CEB801C141814385C146014E0380F81C038078780D803
FEC7FCEA00F819357EB31E>116 D E /Fg 133[42 46 43 69 47
50 27 35 33 46 50 45 48 73 24 46 19 24 48 46 28 40 51
37 46 42 6[55 1[55 83 60 65 51 44 55 65 50 65 69 79 51
60 28 28 69 63 46 51 64 59 51 65 1[37 4[21 42 42 42 42
42 42 42 42 42 42 1[21 28 21 2[28 28 23 35[50 50 2[{
 TeXBase1Encoding ReEncodeFont }71 83.333336 /Palatino-Roman
rf /Fh 138[61 33 44 39 61 61 55 61 89 33 2[33 61 2[50
61 44 1[50 9[100 78 1[66 3[61 6[39 1[83 5[78 7[50 1[50
2[50 50 50 50 49[{ TeXBase1Encoding ReEncodeFont }29
100.000000 /Palatino-Bold rf /Fi 139[56 64 56 2[80 80
1[48 2[48 2[48 64 80 2[80 28[112 98 96 66[{
 TeXBase1Encoding ReEncodeFont }14 144.000000 /Palatino-BoldItalic
rf /Fj 133[37 1[42 1[42 46 28 32 32 38 42 37 46 65 23
37 1[23 42 42 23 32 42 34 38 37 9[78 2[51 46 55 1[51
65 1[78 46 2[28 1[60 46 51 65 55 51 60 6[21 42 42 42
42 42 42 42 42 42 42 2[28 45[{ TeXBase1Encoding ReEncodeFont }51
83.333336 /Palatino-Italic rf /Fk 1 14 df<ED7FF80207B57E021F14E091397FC0
0FF8D901FCC712FED903F0143FD90FC0EC0FC049C8EA03E0013E6F7E0178ED0078498248
488248488249820007188048CAEA03C0000E1701001E18E0001C1700003C18F000381870
0078187800701838A300F0183C48181CA96C183C00701838A30078187800381870003C18
F0001C18E0001E1701000E18C0000F17036C6CEE0780000318006D5E6C6C161E6C6C5E01
785E013E4B5A6D4B5AD90FC0EC0FC0D903F0023FC7FCD901FC14FE903A007FC00FF8021F
B512E0020714809126007FF8C8FC3E3D7CAE47>13 D E /Fl 3[37
129[33 33 3[37 18 33 22 1[37 37 37 4[15 37 37 1[37 1[33
1[37 13[44 5[55 2[33 1[48 3[48 48 9[37 1[37 5[37 2[18
1[18 5[44 38[{ TeXBase1Encoding ReEncodeFont }28 66.666664
/Helvetica rf /Fm 171[46 1[54 11[46 1[54 2[50 31[21 33[{
 TeXBase1Encoding ReEncodeFont }6 75.000000 /Helvetica
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 5 1
5 0 bop 1030 345 a Fm(DRAFT!)1339 343 y Fl(c)1321 345
y Fk(\015)18 b Fl(J)o(an)o(uar)r(y)g(7,)h(1999)f(Chr)q(istopher)h(D)-5
b(.)19 b(Manning)f(&)h(Hinr)q(ich)f(Sch\374tz)o(e)o(.)541
b Fj(v)1030 1147 y Fi(Brief)35 b(Contents)1030 1682 y
Fh(I)99 b(Preliminaries)199 b(1)1030 1814 y Fj(1)83 b(Intr)o(oduction)
164 b Fg(3)1030 1947 y Fj(2)83 b(Mathematical)19 b(Foundations)166
b Fg(35)1030 2080 y Fj(3)83 b(Linguistic)20 b(Essentials)167
b Fg(75)1030 2213 y Fj(4)83 b(Corpus-Based)20 b(W)n(ork)167
b Fg(109)1030 2508 y Fh(II)99 b(W)-7 b(ords)199 b(139)1030
2640 y Fj(5)83 b(Collocations)166 b Fg(141)1030 2773
y Fj(6)83 b(Statistical)19 b(Infer)o(ence:)26 b Ff(n)p
Fj(-gram)20 b(models)g(over)h(sparse)g(data)165 b Fg(177)1030
2906 y Fj(7)83 b(W)n(ord)21 b(Sense)h(Disambiguation)165
b Fg(21)-5 b(1)1030 3039 y Fj(8)83 b(Lexical)20 b(Acquisition)167
b Fg(243)1030 3334 y Fh(III)99 b(Grammar)197 b(291)1030
3466 y Fj(9)83 b(Markov)20 b(Models)167 b Fg(293)1030
3599 y Fj(10)82 b(Part-Of-Speech)19 b(T)-9 b(agging)164
b Fg(317)1030 3732 y Fj(1)-5 b(1)83 b(Pr)o(obabilistic)20
b(Context)h(Fr)o(ee)g(Grammars)166 b Fg(355)1030 3865
y Fj(12)82 b(Pr)o(obabilistic)21 b(Parsing)166 b Fg(379)1030
4160 y Fh(IV)99 b(Applications)25 b(and)g(T)-11 b(echniques)199
b(427)1030 4293 y Fj(13)82 b(Statistical)20 b(Alignment)g(and)g
(Machine)h(T)-9 b(ranslation)166 b Fg(429)1030 4425 y
Fj(14)82 b(Clustering)167 b Fg(459)1030 4558 y Fj(15)82
b(T)-9 b(opics)20 b(in)h(Information)f(Retrieval)166
b Fg(491)1030 4691 y Fj(16)82 b(T)-9 b(ext)20 b(Categorization)165
b Fg(535)p eop
%%Page: 7 2
7 1 bop 1030 345 a Fm(DRAFT!)1339 343 y Fl(c)1321 345
y Fk(\015)18 b Fl(J)o(an)o(uar)r(y)g(7,)h(1999)f(Chr)q(istopher)h(D)-5
b(.)19 b(Manning)f(&)h(Hinr)q(ich)f(Sch\374tz)o(e)o(.)495
b Fj(vii)1030 1147 y Fi(Detailed)34 b(Contents)1030 1753
y Fe(List)20 b(of)h(T)-9 b(ables)165 b Fd(xv)1030 1961
y Fe(List)20 b(of)h(Figur)o(es)165 b Fd(xxi)1030 2168
y Fe(T)-9 b(able)20 b(of)g(Notations)166 b Fd(xxv)1030
2376 y Fe(Pr)o(eface)g Fd(xxix)1030 2584 y Fe(Road)21
b(Map)167 b Fd(xxxiii)1030 2878 y Fh(I)99 b(Preliminaries)199
b(1)1030 3069 y Fd(1)83 b Fe(Intr)o(oduction)167 b Fd(3)1155
3194 y Fg(1.1)119 b(Pr)o(ologue:)25 b(Rationalist)d(and)e(Empiricist)i
(Appr)o(oaches)164 b(4)1155 3302 y(1.2)119 b(Scienti\002c)20
b(Content)167 b(7)1379 3410 y(1.2.1)147 b(Questions)22
b(that)f(linguistics)h(should)g(answer)166 b(7)1379 3518
y(1.2.2)147 b(Non-categorical)20 b(phenomena)i(in)f(language)166
b(10)1379 3625 y(1.2.3)147 b(Language)20 b(and)g(cognition)j(as)d(pr)o
(obabilistic)1694 3733 y(phenomena)167 b(14)1155 3841
y(1.3)119 b(The)20 b(Ambiguity)i(of)f(Language:)j(Why)d(NLP)g(is)g(Dif)
o(\002cult)166 b(16)1155 3949 y(1.4)119 b(Dirty)21 b(Hands)166
b(18)1379 4057 y(1.4.1)147 b(Lexical)20 b(r)o(esour)o(ces)165
b(18)1379 4165 y(1.4.2)147 b(W)-8 b(or)o(d)21 b(counts)167
b(19)1379 4273 y(1.4.3)147 b(Zipf)5 b('s)21 b(laws)166
b(21)1379 4381 y(1.4.4)147 b(Collocations)168 b(27)1379
4489 y(1.4.5)147 b(Concor)o(dances)166 b(30)1155 4597
y(1.5)119 b(Further)20 b(Reading)167 b(32)1155 4705 y(1.6)119
b(Exer)o(cises)165 b(33)p eop
%%Page: 8 3
8 2 bop 75 345 a Fj(viii)3098 b Fc(Detailed)19 b(Contents)1113
617 y Fd(2)83 b Fe(Mathematical)21 b(Foundations)167
b Fd(35)1238 742 y Fg(2.1)119 b(Elementary)20 b(Pr)o(obability)h
(Theory)166 b(35)1462 850 y(2.1.1)147 b(Pr)o(obability)21
b(spaces)165 b(36)1462 958 y(2.1.2)147 b(Conditional)22
b(pr)o(obability)e(and)h(independence)165 b(37)1462 1066
y(2.1.3)147 b(Bayes')20 b(theor)o(em)166 b(39)1462 1174
y(2.1.4)147 b(Random)22 b(variables)165 b(40)1462 1281
y(2.1.5)147 b(Expectation)21 b(and)f(variance)165 b(41)1462
1389 y(2.1.6)147 b(Notation)167 b(43)1462 1497 y(2.1.7)147
b(Joint)22 b(and)e(conditional)i(distributions)167 b(43)1462
1605 y(2.1.8)147 b(Determining)22 b Ff(P)178 b Fg(44)1462
1713 y(2.1.9)147 b(Standar)o(d)19 b(distributions)167
b(45)1462 1821 y(2.1.10)105 b(Bayesian)20 b(statistics)167
b(49)1462 1929 y(2.1.1)-5 b(1)110 b(Exer)o(cises)165
b(53)1238 2037 y(2.2)119 b(Essential)21 b(Information)g(Theory)166
b(55)1462 2145 y(2.2.1)147 b(Entr)o(opy)166 b(55)1462
2253 y(2.2.2)147 b(Joint)22 b(entr)o(opy)e(and)g(conditional)i(entr)o
(opy)166 b(58)1462 2361 y(2.2.3)147 b(Mutual)20 b(information)167
b(61)1462 2469 y(2.2.4)147 b(The)21 b(noisy)h(channel)f(model)166
b(63)1462 2577 y(2.2.5)147 b(Relative)21 b(entr)o(opy)f(or)h
(Kullback-Leibler)f(diver)o(gence)165 b(66)1462 2685
y(2.2.6)147 b(The)21 b(r)o(elation)f(to)h(language:)26
b(Cr)o(oss)20 b(entr)o(opy)166 b(67)1462 2792 y(2.2.7)147
b(The)21 b(entr)o(opy)g(of)f(English)167 b(70)1462 2900
y(2.2.8)147 b(Perplexity)166 b(72)1462 3008 y(2.2.9)147
b(Exer)o(cises)165 b(72)1238 3116 y(2.3)119 b(Further)20
b(Reading)167 b(73)1113 3307 y Fd(3)83 b Fe(Linguistic)19
b(Essentials)165 b Fd(75)1238 3432 y Fg(3.1)119 b(Parts)20
b(of)h(Speech)f(and)g(Morphology)167 b(75)1462 3540 y(3.1.1)147
b(Nouns)22 b(and)e(pr)o(onouns)167 b(77)1462 3648 y(3.1.2)147
b(W)-8 b(or)o(ds)21 b(that)g(accompany)f(nouns:)27 b(Determiners)21
b(and)1777 3756 y(adjectives)166 b(80)1462 3863 y(3.1.3)147
b(V)-9 b(erbs)166 b(82)1462 3971 y(3.1.4)147 b(Other)21
b(parts)f(of)h(speech)166 b(84)1238 4079 y(3.2)119 b(Phrase)20
b(Str)o(uctur)o(e)165 b(86)1462 4187 y(3.2.1)147 b(Phrase)21
b(str)o(uctur)o(e)f(grammars)166 b(88)1462 4295 y(3.2.2)147
b(Dependency:)26 b(Ar)o(guments)20 b(and)g(adjuncts)167
b(93)1462 4403 y(3.2.3)147 b(X)1832 4373 y Fb(0)1877
4403 y Fg(theory)166 b(98)1462 4511 y(3.2.4)147 b(Phrase)21
b(str)o(uctur)o(e)f(ambiguity)167 b(99)1238 4619 y(3.3)119
b(Semantics)20 b(and)h(Pragmatics)165 b(101)1238 4727
y(3.4)119 b(Other)21 b(Ar)o(eas)164 b(104)p eop
%%Page: 9 4
9 3 bop 1030 345 a Fc(Detailed)19 b(Contents)2105 b Fj(ix)1155
617 y Fg(3.5)119 b(Further)20 b(Reading)167 b(105)1155
725 y(3.6)119 b(Exer)o(cises)165 b(105)1030 916 y Fd(4)83
b Fe(Corpus-Based)22 b(W)-5 b(ork)167 b Fd(109)1155 1041
y Fg(4.1)119 b(Getting)21 b(Set)g(Up)165 b(1)-5 b(10)1379
1149 y(4.1.1)147 b(Computers)167 b(1)-5 b(10)1379 1257
y(4.1.2)147 b(Corpora)166 b(1)-5 b(10)1379 1364 y(4.1.3)147
b(Softwar)o(e)165 b(1)-5 b(12)1155 1472 y(4.2)119 b(Looking)22
b(at)e(T)-8 b(ext)166 b(1)-5 b(14)1379 1580 y(4.2.1)147
b(Low)21 b(level)g(formatting)g(issues)167 b(1)-5 b(15)1379
1688 y(4.2.2)147 b(T)-8 b(okenization:)27 b(What)20 b(is)h(a)g(wor)o
(d?)165 b(1)-5 b(16)1379 1796 y(4.2.3)147 b(Morphology)167
b(122)1379 1904 y(4.2.4)147 b(Sentences)166 b(125)1155
2012 y(4.3)119 b(Marked-up)19 b(Data)165 b(127)1379 2120
y(4.3.1)147 b(Mark-up)20 b(schemes)166 b(128)1379 2228
y(4.3.2)147 b(Grammatical)20 b(tagging)167 b(130)1155
2336 y(4.4)119 b(Further)20 b(Reading)167 b(135)1030
2631 y Fh(II)99 b(W)-7 b(ords)199 b(139)1030 2822 y Fd(5)83
b Fe(Collocations)165 b Fd(141)1155 2946 y Fg(5.1)119
b(Fr)o(equency)166 b(143)1155 3054 y(5.2)119 b(Mean)20
b(and)g(V)-8 b(ariance)165 b(147)1155 3162 y(5.3)119
b(Hypothesis)22 b(T)-8 b(esting)167 b(152)1379 3270 y(5.3.1)147
b(The)21 b Ff(t)g Fg(test)166 b(152)1379 3378 y(5.3.2)147
b(Hypothesis)22 b(testing)g(of)e(dif)o(fer)o(ences)164
b(156)1379 3486 y(5.3.3)147 b(Pearson's)21 b(chi-squar)o(e)f(test)167
b(157)1379 3594 y(5.3.4)147 b(Likelihood)22 b(Ratios)167
b(161)1155 3702 y(5.4)119 b(Mutual)20 b(Information)167
b(166)1155 3809 y(5.5)119 b(The)20 b(Notion)i(of)f(Collocation)167
b(171)1155 3917 y(5.6)119 b(Further)20 b(Reading)167
b(174)1030 4108 y Fd(6)83 b Fe(Statistical)20 b(Infer)o(ence:)25
b Fa(n)p Fe(-gram)d(models)e(over)i(sparse)e(data)167
b Fd(177)1155 4233 y Fg(6.1)119 b(Bins:)26 b(Forming)c(Equivalence)e
(Classes)166 b(178)1379 4341 y(6.1.1)147 b(Reliability)22
b(vs.)e(discrimination)167 b(178)1379 4449 y(6.1.2)147
b Ff(n)p Fg(-gram)20 b(models)167 b(178)1379 4557 y(6.1.3)147
b(Building)21 b Ff(n)p Fg(-gram)f(models)167 b(180)1155
4665 y(6.2)119 b(Statistical)20 b(Estimators)166 b(181)1379
4773 y(6.2.1)147 b(Maximum)21 b(Likelihood)g(Estimation)h(\(MLE\))164
b(182)p eop
%%Page: 10 5
10 4 bop 75 345 a Fj(x)3167 b Fc(Detailed)19 b(Contents)1462
617 y Fg(6.2.2)147 b(Laplace's)20 b(Law)-8 b(,)20 b(Lidstone's)h(Law)g
(and)f(the)1777 725 y(Jef)o(fr)o(eys-Perks)e(Law)166
b(187)1462 833 y(6.2.3)147 b(Held)21 b(out)g(estimation)167
b(190)1462 941 y(6.2.4)147 b(Cr)o(oss-validation)20 b(\(Deleted)g
(estimation\))167 b(195)1462 1049 y(6.2.5)147 b(Good-T)-7
b(uring)21 b(estimation)167 b(196)1462 1157 y(6.2.6)147
b(Brie\003y)21 b(noted)166 b(200)1238 1265 y(6.3)119
b(Combining)22 b(Estimators)166 b(201)1462 1373 y(6.3.1)147
b(Simple)21 b(linear)f(interpolation)167 b(202)1462 1481
y(6.3.2)147 b(Katz's)21 b(backing-of)o(f)165 b(203)1462
1589 y(6.3.3)147 b(General)21 b(linear)f(interpolation)167
b(204)1462 1697 y(6.3.4)147 b(Brie\003y)21 b(noted)166
b(205)1462 1805 y(6.3.5)147 b(Language)20 b(models)h(for)g(Austen)166
b(207)1238 1912 y(6.4)119 b(Conclusions)168 b(207)1238
2020 y(6.5)119 b(Further)20 b(Reading)167 b(208)1238
2128 y(6.6)119 b(Exer)o(cises)165 b(209)1113 2319 y Fd(7)83
b Fe(W)-5 b(ord)21 b(Sense)g(Disambiguation)165 b Fd(21)m(1)1238
2444 y Fg(7.1)119 b(Methodological)21 b(Pr)o(eliminaries)166
b(213)1462 2552 y(7.1.1)147 b(Supervised)20 b(and)g(unsupervised)h
(learning)166 b(214)1462 2660 y(7.1.2)147 b(Pseudowor)o(ds)166
b(215)1462 2768 y(7.1.3)147 b(Upper)20 b(and)g(lower)h(bounds)h(on)f
(performance)165 b(215)1238 2875 y(7.2)119 b(Supervised)19
b(Disambiguation)168 b(216)1462 2983 y(7.2.1)147 b(Bayesian)20
b(classi\002cation)167 b(217)1462 3091 y(7.2.2)147 b(An)21
b(information-theor)o(etic)g(appr)o(oach)165 b(220)1238
3199 y(7.3)119 b(Dictionary-Based)20 b(Disambiguation)167
b(223)1462 3307 y(7.3.1)147 b(Disambiguation)22 b(based)e(on)h(sense)g
(de\002nitions)168 b(223)1462 3415 y(7.3.2)147 b(Thesaur)o(us-based)20
b(disambiguation)167 b(225)1462 3523 y(7.3.3)147 b(Disambiguation)22
b(based)e(on)h(translations)h(in)f(a)1777 3631 y(second-language)f
(corpus)167 b(228)1462 3739 y(7.3.4)147 b(One)21 b(sense)g(per)g
(discourse,)f(one)h(sense)g(per)1777 3847 y(collocation)167
b(230)1238 3955 y(7.4)119 b(Unsupervised)20 b(Disambiguation)167
b(232)1238 4063 y(7.5)119 b(What)20 b(is)i(a)e(W)-8 b(or)o(d)20
b(Sense?)166 b(236)1238 4171 y(7.6)119 b(Further)20 b(Reading)167
b(240)1238 4279 y(7.7)119 b(Exer)o(cises)165 b(241)1113
4469 y Fd(8)83 b Fe(Lexical)19 b(Acquisition)165 b Fd(243)1238
4594 y Fg(8.1)119 b(Evaluation)20 b(Measur)o(es)165 b(245)1238
4702 y(8.2)119 b(V)-9 b(erb)20 b(Subcategorization)165
b(248)1238 4810 y(8.3)119 b(Attachment)20 b(Ambiguity)167
b(255)p eop
%%Page: 11 6
11 5 bop 1030 345 a Fc(Detailed)19 b(Contents)2105 b
Fj(xi)1379 617 y Fg(8.3.1)147 b(Hindle)21 b(and)f(Rooth)j(\(1993\))163
b(257)1379 725 y(8.3.2)147 b(General)21 b(r)o(emarks)e(on)j(PP)f
(attachment)166 b(261)1155 833 y(8.4)119 b(Selectional)20
b(Pr)o(efer)o(ences)164 b(264)1155 941 y(8.5)119 b(Semantic)20
b(Similarity)166 b(270)1379 1049 y(8.5.1)147 b(V)-9 b(ector)21
b(space)e(measur)o(es)166 b(273)1379 1157 y(8.5.2)147
b(Pr)o(obabilistic)21 b(measur)o(es)165 b(278)1155 1265
y(8.6)119 b(The)20 b(Role)i(of)f(Lexical)e(Acquisition)k(in)e
(Statistical)f(NLP)166 b(283)1155 1373 y(8.7)119 b(Further)20
b(Reading)167 b(287)1030 1668 y Fh(III)99 b(Grammar)197
b(291)1030 1858 y Fd(9)83 b Fe(Markov)22 b(Models)166
b Fd(293)1155 1983 y Fg(9.1)119 b(Markov)20 b(Models)165
b(293)1155 2091 y(9.2)119 b(Hidden)20 b(Markov)g(Models)166
b(296)1379 2199 y(9.2.1)147 b(Why)21 b(use)g(HMMs?)166
b(297)1379 2307 y(9.2.2)147 b(General)21 b(form)f(of)h(an)g(HMM)165
b(299)1155 2415 y(9.3)119 b(The)20 b(Thr)o(ee)g(Fundamental)h
(Questions)h(for)f(HMMs)165 b(300)1379 2523 y(9.3.1)147
b(Finding)22 b(the)f(pr)o(obability)f(of)h(an)f(observation)167
b(301)1379 2631 y(9.3.2)147 b(Finding)22 b(the)f(best)g(state)f
(sequence)166 b(306)1379 2738 y(9.3.3)147 b(The)21 b(thir)o(d)f(pr)o
(oblem:)25 b(Parameter)20 b(estimation)167 b(308)1155
2846 y(9.4)119 b(HMMs:)25 b(Implementation,)c(Pr)o(operties,)f(and)g(V)
-8 b(ariants)166 b(31)-5 b(1)1379 2954 y(9.4.1)147 b(Implementation)167
b(31)-5 b(1)1379 3062 y(9.4.2)147 b(V)-8 b(ariants)166
b(312)1379 3170 y(9.4.3)147 b(Multiple)21 b(input)g(observations)167
b(313)1379 3278 y(9.4.4)147 b(Initialization)21 b(of)g(parameter)e
(values)166 b(314)1155 3386 y(9.5)119 b(Further)20 b(Reading)167
b(314)1030 3577 y Fd(10)41 b Fe(Part-Of-Speech)22 b(T)-9
b(agging)164 b Fd(317)1155 3702 y Fg(10.1)77 b(The)20
b(Information)i(Sour)o(ces)e(in)h(T)-8 b(agging)167 b(318)1155
3809 y(10.2)77 b(Markov)20 b(Model)g(T)-8 b(aggers)166
b(320)1379 3917 y(10.2.1)105 b(The)21 b(pr)o(obabilistic)f(model)167
b(320)1379 4025 y(10.2.2)105 b(The)21 b(V)-5 b(iterbi)21
b(algorithm)167 b(325)1379 4133 y(10.2.3)105 b(V)-8 b(ariations)167
b(327)1155 4241 y(10.3)77 b(Hidden)20 b(Markov)g(Model)h(T)-8
b(aggers)165 b(332)1379 4349 y(10.3.1)105 b(Applying)21
b(HMMs)f(to)i(POS)e(tagging)167 b(332)1379 4457 y(10.3.2)105
b(The)21 b(ef)o(fect)e(of)i(initialization)g(on)g(HMM)f(training)167
b(334)1155 4565 y(10.4)77 b(T)-7 b(ransformation-Based)19
b(Learning)h(of)h(T)-8 b(ags)166 b(336)1379 4673 y(10.4.1)105
b(T)-7 b(ransformations)166 b(337)1379 4781 y(10.4.2)105
b(The)21 b(learning)g(algorithm)167 b(339)p eop
%%Page: 12 7
12 6 bop 75 345 a Fj(xii)3121 b Fc(Detailed)19 b(Contents)1462
617 y Fg(10.4.3)105 b(Relation)22 b(to)f(other)g(models)166
b(340)1462 725 y(10.4.4)105 b(Automata)166 b(342)1462
833 y(10.4.5)105 b(Summary)166 b(343)1462 941 y(10.4.6)105
b(Exer)o(cises)165 b(344)1238 1049 y(10.5)77 b(Other)21
b(Methods,)f(Other)h(Languages)166 b(345)1462 1157 y(10.5.1)105
b(Other)21 b(appr)o(oaches)f(to)h(tagging)166 b(345)1462
1265 y(10.5.2)105 b(Languages)20 b(other)h(than)g(English)167
b(345)1238 1373 y(10.6)77 b(T)-8 b(agging)21 b(Accuracy)f(and)g(Uses)h
(of)f(T)-8 b(aggers)166 b(346)1462 1481 y(10.6.1)105
b(T)-8 b(agging)22 b(accuracy)164 b(346)1462 1589 y(10.6.2)105
b(Applications)21 b(of)g(tagging)166 b(349)1238 1697
y(10.7)77 b(Further)20 b(Reading)167 b(351)1238 1805
y(10.8)77 b(Exer)o(cises)165 b(353)1113 1995 y Fd(1)m(1)44
b Fe(Pr)o(obabilistic)19 b(Context)i(Fr)o(ee)f(Grammars)167
b Fd(355)1238 2120 y Fg(1)-5 b(1.1)82 b(Some)20 b(Featur)o(es)g(of)h
(PCFGs)167 b(360)1238 2228 y(1)-5 b(1.2)82 b(Questions)22
b(for)e(PCFGs)167 b(362)1238 2336 y(1)-5 b(1.3)82 b(The)20
b(Pr)o(obability)h(of)g(a)f(String)166 b(364)1462 2444
y(1)-5 b(1.3.1)110 b(Using)21 b(inside)g(pr)o(obabilities)166
b(364)1462 2552 y(1)-5 b(1.3.2)110 b(Using)21 b(outside)g(pr)o
(obabilities)166 b(367)1462 2660 y(1)-5 b(1.3.3)110 b(Finding)22
b(the)f(most)h(likely)f(parse)f(for)g(a)h(sentence)166
b(369)1462 2768 y(1)-5 b(1.3.4)110 b(T)-7 b(raining)21
b(a)f(PCFG)167 b(371)1238 2875 y(1)-5 b(1.4)82 b(Pr)o(oblems)21
b(with)g(the)g(Inside-Outside)g(algorithm)167 b(374)1238
2983 y(1)-5 b(1.5)82 b(Further)20 b(Reading)167 b(375)1238
3091 y(1)-5 b(1.6)82 b(Exer)o(cises)165 b(376)1113 3282
y Fd(12)41 b Fe(Pr)o(obabilistic)19 b(Parsing)166 b Fd(379)1238
3407 y Fg(12.1)77 b(Some)20 b(Concepts)167 b(380)1462
3515 y(12.1.1)105 b(Parsing)21 b(for)g(disambiguation)166
b(380)1462 3623 y(12.1.2)105 b(T)-7 b(r)o(eebanks)165
b(383)1462 3731 y(12.1.3)105 b(Parsing)21 b(models)h(vs.)e(language)h
(models)166 b(386)1462 3839 y(12.1.4)105 b(W)-8 b(eakening)22
b(the)e(independence)h(assumptions)h(of)1777 3946 y(PCFGs)167
b(387)1462 4054 y(12.1.5)105 b(T)-7 b(r)o(ee)19 b(pr)o(obabilities)i
(and)f(derivational)g(pr)o(obabilities)166 b(390)1462
4162 y(12.1.6)105 b(Ther)o(e's)20 b(mor)o(e)h(than)g(one)g(way)g(to)g
(do)g(it)166 b(394)1462 4270 y(12.1.7)105 b(Phrase)21
b(str)o(uctur)o(e)f(grammars)g(and)h(dependency)1777
4378 y(grammars)166 b(398)1462 4486 y(12.1.8)105 b(Evaluation)166
b(401)1462 4594 y(12.1.9)105 b(Equivalent)21 b(models)167
b(407)1462 4702 y(12.1.10)63 b(Building)21 b(parsers:)k(Sear)o(ch)19
b(methods)167 b(409)1462 4810 y(12.1.1)-5 b(1)68 b(Use)21
b(of)f(the)h(geometric)g(mean)166 b(412)p eop
%%Page: 13 8
13 7 bop 1030 345 a Fc(Detailed)19 b(Contents)2059 b
Fj(xiii)1155 617 y Fg(12.2)77 b(Some)20 b(Appr)o(oaches)165
b(412)1379 725 y(12.2.1)105 b(Non-lexicalized)20 b(tr)o(eebank)f
(grammars)166 b(413)1379 833 y(12.2.2)105 b(Lexicalized)19
b(models)i(using)h(derivational)e(histories)167 b(417)1379
941 y(12.2.3)105 b(Dependency-based)20 b(models)166 b(420)1155
1049 y(12.3)77 b(Further)20 b(Reading)167 b(423)1155
1157 y(12.4)77 b(Exer)o(cises)165 b(425)1030 1452 y Fh(IV)99
b(Applications)25 b(and)g(T)-11 b(echniques)199 b(427)1030
1643 y Fd(13)41 b Fe(Statistical)20 b(Alignment)g(and)i(Machine)f(T)-8
b(ranslation)166 b Fd(429)1155 1767 y Fg(13.1)77 b(T)-8
b(ext)20 b(Alignment)167 b(432)1379 1875 y(13.1.1)105
b(Aligning)22 b(sentences)f(and)f(paragraphs)165 b(433)1379
1983 y(13.1.2)105 b(Length-based)20 b(methods)167 b(436)1379
2091 y(13.1.3)105 b(Of)o(fset)20 b(alignment)i(by)e(signal)i(pr)o
(ocessing)1694 2199 y(techniques)167 b(440)1379 2307
y(13.1.4)105 b(Lexical)20 b(methods)h(of)g(sentence)g(alignment)167
b(443)1379 2415 y(13.1.5)105 b(Summary)166 b(448)1379
2523 y(13.1.6)105 b(Exer)o(cises)165 b(449)1155 2631
y(13.2)77 b(W)-8 b(or)o(d)20 b(Alignment)167 b(449)1155
2738 y(13.3)77 b(Statistical)20 b(Machine)g(T)-7 b(ranslation)166
b(450)1379 2846 y(13.3.1)105 b(Exer)o(cises)165 b(456)1155
2954 y(13.4)77 b(Further)20 b(Reading)167 b(457)1030
3145 y Fd(14)41 b Fe(Clustering)165 b Fd(459)1155 3270
y Fg(14.1)77 b(Hierar)o(chical)19 b(Clustering)167 b(463)1379
3378 y(14.1.1)105 b(Single-link)22 b(and)e(complete-link)h(clustering)
167 b(466)1379 3486 y(14.1.2)105 b(Gr)o(oup-average)19
b(agglomerative)h(clustering)167 b(470)1379 3594 y(14.1.3)105
b(An)21 b(application:)k(Impr)o(oving)c(a)g(language)f(model)166
b(472)1379 3702 y(14.1.4)105 b(T)-8 b(op-down)22 b(clustering)166
b(475)1155 3809 y(14.2)77 b(Non-Hierar)o(chical)19 b(Clustering)167
b(476)1379 3917 y(14.2.1)105 b(K-means)166 b(478)1379
4025 y(14.2.2)105 b(The)21 b(EM)f(algorithm)167 b(481)1155
4133 y(14.3)77 b(Further)20 b(Reading)167 b(489)1155
4241 y(14.4)77 b(Exer)o(cises)165 b(490)1030 4432 y Fd(15)41
b Fe(T)-9 b(opics)20 b(in)g(Information)i(Retrieval)166
b Fd(491)1155 4557 y Fg(15.1)77 b(Some)20 b(Backgr)o(ound)g(on)i
(Information)f(Retrieval)166 b(491)1379 4665 y(15.1.1)105
b(Common)22 b(design)g(featur)o(es)d(of)h(IR)i(systems)166
b(494)1379 4773 y(15.1.2)105 b(Evaluation)21 b(measur)o(es)165
b(496)p eop
%%Page: 14 9
14 8 bop 75 345 a Fj(xiv)3102 b Fc(Detailed)19 b(Contents)1462
617 y Fg(15.1.3)105 b(The)21 b(pr)o(obability)f(ranking)h(principle)g
(\(PRP\))166 b(499)1238 725 y(15.2)77 b(The)20 b(V)-9
b(ector)21 b(Space)e(Model)166 b(500)1462 833 y(15.2.1)105
b(V)-9 b(ector)21 b(similarity)166 b(502)1462 941 y(15.2.2)105
b(T)-8 b(erm)21 b(weighting)167 b(503)1238 1049 y(15.3)77
b(T)-8 b(erm)21 b(Distribution)h(Models)166 b(505)1462
1157 y(15.3.1)105 b(The)21 b(Poisson)h(distribution)167
b(506)1462 1265 y(15.3.2)105 b(The)21 b(two-Poisson)i(model)166
b(509)1462 1373 y(15.3.3)105 b(The)21 b(K)g(mixtur)o(e)166
b(510)1462 1481 y(15.3.4)105 b(Inverse)21 b(document)g(fr)o(equency)165
b(512)1462 1589 y(15.3.5)105 b(Residual)21 b(inverse)g(document)g(fr)o
(equency)165 b(514)1462 1697 y(15.3.6)105 b(Usage)20
b(of)h(term)g(distribution)g(models)167 b(514)1238 1805
y(15.4)77 b(Latent)20 b(Semantic)g(Indexing)167 b(515)1462
1912 y(15.4.1)105 b(Least-squar)o(es)19 b(methods)167
b(517)1462 2020 y(15.4.2)105 b(Singular)21 b(V)-8 b(alue)20
b(Decomposition)168 b(519)1462 2128 y(15.4.3)105 b(Latent)20
b(Semantic)h(Indexing)g(in)g(IR)167 b(524)1238 2236 y(15.5)77
b(Discourse)21 b(Segmentation)167 b(526)1462 2344 y(15.5.1)105
b(T)-8 b(extT)j(iling)167 b(527)1238 2452 y(15.6)77 b(Further)20
b(Reading)167 b(530)1238 2560 y(15.7)77 b(Exer)o(cises)165
b(532)1113 2751 y Fd(16)41 b Fe(T)-9 b(ext)20 b(Categorization)165
b Fd(535)1238 2875 y Fg(16.1)77 b(Decision)22 b(T)-7
b(r)o(ees)164 b(537)1238 2983 y(16.2)77 b(Maximum)20
b(Entr)o(opy)h(Modeling)166 b(548)1462 3091 y(16.2.1)105
b(Generalized)20 b(iterative)g(scaling)166 b(550)1462
3199 y(16.2.2)105 b(Application)21 b(to)g(text)g(categorization)165
b(554)1238 3307 y(16.3)77 b(Per)o(ceptr)o(ons)165 b(556)1238
3415 y(16.4)77 b(K)21 b(Near)o(est)e(Neighbor)i(classi\002cation)167
b(561)1238 3523 y(16.5)77 b(Further)20 b(Reading)167
b(564)1113 3714 y Fe(T)-6 b(iny)20 b(Statistical)h(T)-9
b(ables)165 b Fd(567)1113 3922 y Fe(Bibliography)h Fd(569)1113
4129 y Fe(Index)g Fd(613)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
